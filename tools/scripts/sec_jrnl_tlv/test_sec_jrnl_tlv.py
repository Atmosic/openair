'''
@file test_sec_jrnl_tlv.py

@brief Secure Journal Managment Unit tests

Copyright (C) Atmosic 2024
'''
import unittest
import sec_jrnl_tlv


class TestTLVStatusMethods(unittest.TestCase):
    """Test TLVStatus class"""

    def test_default_status(self):
        tlv_status = sec_jrnl_tlv.TLVStatus()
        self.assertEqual(tlv_status.status, 6)
        self.assertEqual(tlv_status.valid, True)
        self.assertEqual(tlv_status.locked, False)
        self.assertEqual(tlv_status.erased, False)

    def test_override_default_status(self):
        tlv_status = sec_jrnl_tlv.TLVStatus(1)
        self.assertEqual(tlv_status.valid, False)
        self.assertEqual(tlv_status.locked, True)
        self.assertEqual(tlv_status.erased, True)
        tlv_status = sec_jrnl_tlv.TLVStatus(3)
        self.assertEqual(tlv_status.valid, False)
        self.assertEqual(tlv_status.locked, False)
        self.assertEqual(tlv_status.erased, True)
        tlv_status = sec_jrnl_tlv.TLVStatus(4)
        self.assertEqual(tlv_status.valid, True)
        self.assertEqual(tlv_status.locked, True)
        self.assertEqual(tlv_status.erased, False)

    def test_valid_property_setter(self):
        tlv_status = sec_jrnl_tlv.TLVStatus(0)
        self.assertEqual(tlv_status.valid, True)
        tlv_status.valid = False
        self.assertEqual(tlv_status.valid, False)
        self.assertEqual(tlv_status.status, 1)

    def test_locked_property_setter(self):
        tlv_status = sec_jrnl_tlv.TLVStatus(0)
        self.assertEqual(tlv_status.locked, True)
        tlv_status.locked = False
        self.assertEqual(tlv_status.locked, False)
        self.assertEqual(tlv_status.status, 2)

    def test_erased_property_setter(self):
        tlv_status = sec_jrnl_tlv.TLVStatus(0)
        self.assertEqual(tlv_status.erased, True)
        tlv_status.erased = False
        self.assertEqual(tlv_status.erased, False)
        self.assertEqual(tlv_status.status, 4)


class TestTLVMethods(unittest.TestCase):
    """Test TLV class"""

    def test_basic_TLV_creation(self):
        tlv = sec_jrnl_tlv.TLV(0xaa, 0x7, 2, b'\xde\xad')
        self.assertEqual(tlv.idx, -1)
        self.assertEqual(tlv.total_size, 5)
        tlv = sec_jrnl_tlv.TLV(
            0xaa, sec_jrnl_tlv.TLVStatus(4), 2, b'\xde\xad', idx=23)
        self.assertEqual(tlv.idx, 23)
        self.assertEqual(tlv.total_size, 5)
        tlv = sec_jrnl_tlv.TLV(0xaa, 0x7, 2, b'\xde\xad', idx=23)
        self.assertEqual(tlv.idx, 23)
        self.assertEqual(tlv.total_size, 5)

    def test_TLV_creation_fail_on_bad_tag(self):
        with self.assertRaises(sec_jrnl_tlv.InvalidTLVException):
            tlv = sec_jrnl_tlv.TLV(0xff, 0x7, 2, b'\xde\xad')

    def test_TLV_creation_fail_on_bad_length(self):
        with self.assertRaises(sec_jrnl_tlv.InvalidTLVException):
            # length should be 2 but is set to 5
            tlv = sec_jrnl_tlv.TLV(0xaa, 0x7, 5, b'\xde\xad')

    def test_TLV_bin_property(self):
        tlv = sec_jrnl_tlv.TLV(0xaa, 0x7, 2, b'\xde\xad')
        self.assertEqual(tlv.bin, b"\xaa\x07\x02\xde\xad")

    def test_TLV_from_bin(self):
        tlv = sec_jrnl_tlv.TLV.from_bin(b"\xaa\x07\x02\xde\xad", 0)
        self.assertEqual(tlv.tag, 0xaa)
        self.assertEqual(tlv.idx, 0)
        self.assertEqual(tlv.status.status, 0x7)
        self.assertEqual(tlv.total_size, 0x5)
        tlv = sec_jrnl_tlv.TLV.from_bin(b"\x00\x00\xaa\x07\x02\xde\xad", 2)
        self.assertEqual(tlv.tag, 0xaa)
        self.assertEqual(tlv.idx, 2)
        self.assertEqual(tlv.status.status, 0x7)
        self.assertEqual(tlv.total_size, 0x5)

    def test_TLV_from_content(self):
        tlv = sec_jrnl_tlv.TLV.from_contents(0xde, b"\xde\xad")
        self.assertEqual(tlv.bin, b"\xde\x06\x02\xde\xad")
        self.assertEqual(tlv.tag, 0xde)
        self.assertEqual(tlv.idx, -1)
        self.assertEqual(tlv.status.locked, False)
        tlv = sec_jrnl_tlv.TLV.from_contents(0xde, b"\xde\xad", True)
        self.assertEqual(tlv.bin, b"\xde\x04\x02\xde\xad")
        self.assertEqual(tlv.tag, 0xde)
        self.assertEqual(tlv.idx, -1)
        self.assertEqual(tlv.status.locked, True)


class TestSecJrnlMethods(unittest.TestCase):
    """Test SecJrnl class"""

    def setUp(self) -> None:
        self.sec_jrnl_bin = b'NVDS\xb8\x06\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x92E(\x0c\x02\x03\xd4\x00\x00\x00\x00\x00\xb9\x06\x04\x11\x00\x01\x01\xb0\x06\x1c\xe1!\x00\x00\xd8\x05\x00\x00\xa0\x80*\x02P\x80\x10\x01\x10\x00\x00\x00\xcd\r\x1f\x00\x1b\x06\x00\x00\xb1\x06<\x15P\x8b)L\x00P\x04\xfb\xfb\x01\x00LS\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x17\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\xbc\x06,\x11\x00\x00\x00\x07\x00\x06*\x08\xc0\x04*\x10\x00\xfa.\xba;t<\xfc\x10\x16\x0ey\x18%\x00\x93d\x7f\x00\xd6\x94\xd2\x06?\x00\x00\x00\x00\x00\x02\x00\xd0\x06\x04\xde\xad\xbe\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
        return super().setUp()

    def test_sec_jrnl_creation(self):
        secjrnl = sec_jrnl_tlv.SecJrnl(self.sec_jrnl_bin)
        tags = []
        for tag in iter(secjrnl):
            tags.append(tag.tag)
        self.assertEqual([0xb8, 0xb9, 0xb0, 0xb1, 0xbc, 0xd0], tags)

    def test_sec_jrnl_get_tag(self):
        secjrnl = sec_jrnl_tlv.SecJrnl(self.sec_jrnl_bin)
        tlv = secjrnl.get(0xb0)
        self.assertEqual(tlv.tag, 0xb0)
        tlv = secjrnl.get(0x11)
        self.assertEqual(tlv, None)

    def test_sec_jrnl_append_tag(self):
        secjrnl = sec_jrnl_tlv.SecJrnl(self.sec_jrnl_bin)
        tlv = secjrnl.get(0x01)
        self.assertEqual(tlv, None)
        secjrnl.append_tag(0x01, b"hello", False)
        tlv = secjrnl.get(0x01)
        self.assertEqual(tlv.tag, 0x01)


    def test_sec_jrnl_append_tag(self):
        secjrnl = sec_jrnl_tlv.SecJrnl(self.sec_jrnl_bin)
        tlv = secjrnl.get(0x01)
        self.assertEqual(tlv, None)
        secjrnl.append_tag(0x01, b"hello", False)
        tlv = secjrnl.get(0x01)
        self.assertEqual(tlv.tag, 0x01)



if __name__ == '__main__':
    unittest.main()
