set SWDBOARD_NONE 0x0
set SWDBOARD_APT 0x1
set SWDBOARD_DL 0x2

set SWDBOARD_TYPE SWDBOARD_NONE
if {[info exists ::env(SWDBOARD)]} {
    if {$::env(SWDBOARD) eq "APT"} {
	set SWDBOARD_TYPE SWDBOARD_APT
	set ::env(SWDIF) "FTDI"
    } elseif {$::env(SWDBOARD) eq "DL"} {
	set SWDBOARD_TYPE SWDBOARD_DL
	set ::env(SWDIF) "FTDI"
    }
}

if {![info exists ::env(SWDIF)] || $::env(SWDIF) eq "JLINK"} {
    puts "Using JLINK"
    proc jlink_pio_map {} {
	return 0:$::BBOOT_ENABLE:0:0:$::PWD_ENABLE:$::PWD_ENABLE:0:$::CONNECT_ENABLE
    }
    source [find atm_jlink.tcl]
} elseif {$::env(SWDIF) eq "FTDI"} {
    puts "Using FTDI"
    source [find atm_ftdi.tcl]
} else {
    error [format "Unknown SWDIF=%s setting" $::env(SWDIF)]
}

set _SWD_KHZ [expr {[info exists ::env(PARIS_SWD_KHZ)] ? $::env(PARIS_SWD_KHZ) : 300}]

if {![info exists ::env(FTDI_HARD_RESET)]} {
    source [find m33_cpu.tcl]
}

proc set_reset {} {
    assert_pwd
}

proc release_reset {} {
    deassert_pwd
}

proc set_benign_boot {} {
    assert_bboot
}

proc set_normal_boot {} {
    deassert_bboot
}

proc set_vbat {} {
    assert_vbat
}

proc release_vbat {} {
    deassert_vbat
}

proc set_vccio {} {
    assert_vccio
}

proc release_vccio {} {
    deassert_vccio
}

proc set_ls {} {
    assert_ls
}

proc release_ls {} {
    deassert_ls
}

# Start with low frequency in case Backplane clock is running slowly
adapter speed 100

gdb_port disabled
telnet_port disabled
tcl_port disabled

source [find atm_top.tcl]

if {[info exists ::env(FAST_LOAD)]} {
    source [find fast_load/atm_fast_load.tcl]
    source [find fast_load/atm_fast_load_prog.cfg]
    source [find fast_load/atm_fast_load.cfg]
}
